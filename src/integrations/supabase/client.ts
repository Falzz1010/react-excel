// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://cdotfvavnetjvyhbkfqv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNkb3RmdmF2bmV0anZ5aGJrZnF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg3MTExODgsImV4cCI6MjA3NDI4NzE4OH0.3gFzeNRi3CUNmAhYnBfzSdDIdE38TS5dEHcMjb950NQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Prefer sessionStorage to avoid persisting tokens in localStorage.
// Fallback to an in-memory adapter if sessionStorage is unavailable (e.g., SSR).
const inMemoryStorage = (() => {
  let store: Record<string, string> = {};
  return {
    getItem: (key: string) => (key in store ? store[key] : null),
    setItem: (key: string, value: string) => {
      store[key] = value;
    },
    removeItem: (key: string) => {
      delete store[key];
    },
  } as Storage;
})();

const safeSessionStorage: Storage = (() => {
  try {
    if (typeof window !== 'undefined' && window.sessionStorage) {
      return window.sessionStorage;
    }
  } catch {}
  return inMemoryStorage;
})();

// One-time cleanup: remove any existing Supabase auth tokens from localStorage
try {
  if (typeof window !== 'undefined' && window.localStorage) {
    for (let i = 0; i < window.localStorage.length; i++) {
      const key = window.localStorage.key(i);
      if (!key) continue;
      // Supabase v2 default key shape: sb-<project-ref>-auth-token
      if (key.startsWith('sb-') && key.endsWith('-auth-token')) {
        window.localStorage.removeItem(key);
      }
    }
  }
} catch {}

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: safeSessionStorage,
    // Keep session only for the current tab/session. Nothing goes to localStorage.
    persistSession: true,
    autoRefreshToken: true,
  }
});